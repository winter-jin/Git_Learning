一、Git简介
分布式版本控制系统，能够记录每次文件修改的相关信息，允许多人协作共同完成一个项目   

二、Git 安装
安装指令：sudo apt-get install git
用户创建：git config --global user.name "Your Name"   Your Name修改为自己的名字
        git config --global user.email "email@example.com"  同上修改为自己的邮箱

三、创建版本库
创建空目录：mkdir learngit
进入该目录：cd learngit
显示当前目录：pwd
*:请确保目录名（包括父目录）不包含中文。
将此目录变成Git可以管理的仓库:git init
创建一个文本文件(文件名称任意）：gedit first.text  或者  vim first.text
*以上两句仅是选择的编辑器不同
将文件添加到仓库：git add first.txt
*add语句可以一次添加多个文件如：git add first.txt second.text third.text
将文件提交到仓库：git commit -m "wrote a first file"
*:在add，commity命令，或是刚刚修改完文件后可以尝试运行git status查看一下仓库状态
再任意修改下仓库内文件
查看本次修改具体内容：git diff first.text
运行add指令添加文件至仓库暂存区
运行commit指令将文件添加至提交金进入分支（分支的概念后续解释）
运行git status查看工作区状态

四、版本管理
1、版本回退：每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。
具体实现：
先任意修改一下文件内容，git add readme.text,git commit -m "append GPL"
查看之前所有提交：git log
跟随在commit后的是版本id
回退版本：git reset --hard HEAD^
*：git中用HEAD指针表示当前版本，则HEAD^表示上一版本。
查看此时文档内容确认是否已经回退：cat readme.txt

如果希望撤销版本回退方法有两种：
（1)之前git log查看的各版本信息仍然存在
使用命令：git reset --hard 3628164
在具体使用中应将3628164更换成你需要回退到的版本号，即之前用git log查看到的commit后七位字符即可
（2)版本信息已丢失
查看之前每一次命令：git reflog
可以看到信息如：ea34578 HEAD@{0}: reset: moving to HEAD^
HEAD之前的ea34578即为版本号，后续工作如方法一即可

2、工作区与缓存区概念：
http://www.liaoxuefeng.comwiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000
或者查看仓库内的workdirectory.text文件

3、管理修改
值得注意的是虽然add可以一次添加多个修改过的文件，但是一定不要忘了添加任何一个修改过了的文件
例如：修改a文件——>add a——>修改b——>add b——>commit;系统报错，原因是b文件并未添加入缓存区
可行方式是每个文件修改后add一次，或是提交前一次性add但是存在遗忘某的可能。

4.删除修改
（1)尚未使用add之前
此时你当然可以手动修改，但是有时你可能更希望直接恢复到上个版本
丢弃工作区文件修改内容：git checkout -- first.txt
*：git checkout -- file中的“--”符号很重要，丢弃后checkout命令寒以为切换分支，之后会有应用

（2)使用add之后，commit之前
将文件回退到工作区：git reset HEAD first.text
之后的工作同（1)

（3)使用commit之后
直接使用版本回退方法即可

5.删除文件
创建一个新的文本文件(文件名称任意）：gedit second.text  或者  vim second.text
对文件进行修改并执行git add second.text与 git commit -m"add a new file to be deleted"
删除文件指令：rm test.text
此时有两种选择
（1)确实想要删除
从git中移除文件：git rm second.text
提交修改：git commit -m "remove second.txt"
删除完成，可通过git status查看

（2)发生误删情况
将文件恢复到最新版本：git checkout -- second.txt

六、远程仓库
1.建立远程仓库
这个世界上有个叫GitHub的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。
创建SSH Key：ssh-keygen -t rsa -C "youremail@example.com"
*：SSH为GitHub使用的通讯安全协议，将youremail处替换为你的邮箱。
注册GitHub，注册时候注意不要使用网易的126与163邮箱，由于不明原因这两个邮箱收不到GitHub发出的注册验证邮件，而用qq邮箱却能瞬间受到。。。。
用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

2、添加远程库
登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库，在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
将远程库关联至远程库：git remote add origin git@github.com:yourname/learngit.git
*：将yourname处改为你注册GitHub时使用的名字；添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
将当前本地库推送到远程库：git push origin master
*：当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

3、从远程库克隆
登陆GitHub，创建一个新的仓库，名字叫gitskills。
我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件。
将一个远程库克隆到本地：git clone git@github.com:yourname/gitskills.git

七、分支管理
1、分支的含义与作用
请见仓库内名为branch的文件或
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b

2、创建与合并
创建并切换至dev分支：git checkout -b dev
查看当前分支：git branch
在分支上修改文件：gedit first.text  或者  vim first.text，修改内容任意
提交：git add first.text
     git commit -m "branch test"
切换回master分支：git checkout master
将dev分支的工作成果合并到master分支上：git merge dev
删除dev分支：git branch -d dev

3、解决冲突
冲突：例如在dev分支上进行过一次提交后，在master分支上又进行了一次提交，此时两条分支上的指针所在的修改位置相同，git在合并时回报错，即版本冲突。
解决：在dev或者master分支上再进行一次提交，两分支版本不同时即可合并。
查看分支合并情况：git log
用带参数的git log也可以看到分支的合并情况：git log --graph --pretty=oneline --abbrev-commit

4、分支管理策略
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
--no-ff方式的git merge：git merge --no-ff -m "merge with no-ff" dev
用git log看看分支历史：git log --graph --pretty=oneline --abbrev-commit
*   7825a50 merge with no-ff
|\
| * 6224937 add merge
|/
*   59bc1cb conflict fixed
...
会显示如上的信息

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

5、bug分支
每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是当前正在dev上进行的工作还没有提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
将当前工作现场“储藏”起来:git stash
现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
修复工作一如之前介绍，创建分支修改文件，修改完毕后提交，删除分支即可。
恢复现场，有两个办法：
（1)用it stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
（2)另一种方式是用git stash pop，恢复的同时把stash内容也删了：
查看stash情况：git stash list
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：git stash apply stash@{0}

6、强制删除分支
当你发现整条分支都已毫无用处时希望删除该分支，但是执行：git branch -d 分支名 时git会报错提示你该分支未提交不能删除
此时即可使用强制删除指令：git branch -D 分支名

7、多人协作常见问题
问题：
你的小伙伴向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，此时git将报错,因为你的小伙伴的最新提交和你试图推送的提交有冲突
解决：
指定本地dev分支与远程origin/dev分支的链接：git branch --set-upstream dev origin/dev
下载最新dev：git pull
这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push:git push origin dev

因此，多人协作的工作模式通常是这样：

    首先，可以试图用git push origin branch-name推送自己的修改；

    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

    如果合并有冲突，则解决冲突，并在本地提交；

    没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

八、标签管理


























