一、Git简介
分布式版本控制系统，能够记录每次文件修改的相关信息，允许多人协作共同完成一个项目   

二、Git 安装
安装指令：sudo apt-get install git
用户创建：git config --global user.name "Your Name"   Your Name修改为自己的名字
        git config --global user.email "email@example.com"  同上修改为自己的邮箱

三、创建版本库
创建空目录：mkdir learngit
进入该目录：cd learngit
显示当前目录：pwd
*:请确保目录名（包括父目录）不包含中文。
将此目录变成Git可以管理的仓库:git init
创建一个文本文件(文件名称任意）：gedit first.text  或者  vim first.text
*以上两句仅是选择的编辑器不同
将文件添加到仓库：git add first.txt
*add语句可以一次添加多个文件如：git add first.txt second.text third.text
将文件提交到仓库：git commit -m "wrote a first file"
*:在add，commity命令，或是刚刚修改完文件后可以尝试运行git status查看一下仓库状态
再任意修改下仓库内文件
查看本次修改具体内容：git diff first.text
运行add指令添加文件至仓库暂存区
运行commit指令将文件添加至提交金进入分支（分支的概念后续解释）
运行git status查看工作区状态

四、版本管理
1、版本回退：每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。
具体实现：
先任意修改一下文件内容，git add readme.text,git commit -m "append GPL"
查看之前所有提交：git log
跟随在commit后的是版本id
回退版本：git reset --hard HEAD^
*：git中用HEAD指针表示当前版本，则HEAD^表示上一版本。
查看此时文档内容确认是否已经回退：cat readme.txt
如果希望撤销版本回退方法有两种：
（1)之前git log查看的各版本信息仍然存在
使用命令：git reset --hard 3628164
在具体使用中应将3628164更换成你需要回退到的版本号，即之前用git log查看到的commit后七位字符即可
（2)版本信息已丢失
查看之前每一次命令：git reflog
可以看到信息如：ea34578 HEAD@{0}: reset: moving to HEAD^
HEAD之前的ea34578即为版本号，后续工作如方法一即可

2、工作区与缓存区概念：
http://www.liaoxuefeng.comwiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000

3、管理修改
值得注意的是虽然add可以一次添加多个修改过的文件，但是一定不要忘了添加任何一个修改过了的文件
例如：修改a文件——>add a——>修改b——>add b——>commit;系统报错，原因是b文件并未添加入缓存区
可行方式是每个文件修改后add一次，或是提交前一次性add但是存在遗忘某的可能。

4.删除修改
（1)尚未使用add之前
此时你当然可以手动修改，但是有时你可能更希望直接恢复到上个版本
丢弃工作区文件修改内容：git checkout -- first.txt
*：git checkout -- file中的“--”符号很重要，丢弃后checkout命令寒以为切换分支，之后会有应用

（2)使用add之后，commit之前
将文件回退到工作区：git reset HEAD first.text
之后的工作同（1)

（3)使用commit之后
直接使用版本回退方法即可

5.删除文件
创建一个新的文本文件(文件名称任意）：gedit second.text  或者  vim second.text
对文件进行修改并执行git add second.text与 git commit -m"add a new file to be deleted"
删除文件指令：rm test.text
此时有两种选择
（1)确实想要删除
从git中移除文件：git rm second.text
提交修改：git commit -m "remove second.txt"
删除完成，可通过git status查看

（2)发生误删情况
将文件恢复到最新版本：git checkout -- second.txt

六、远程仓库
1.建立远程仓库
这个世界上有个叫GitHub的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。
创建SSH Key：ssh-keygen -t rsa -C "youremail@example.com"
*：SSH为GitHub使用的通讯安全协议，将youremail处替换为你的邮箱。
注册GitHub，注册时候注意不要使用网易的126与163邮箱，由于不明原因这两个邮箱收不到GitHub发出的注册验证邮件，而用qq邮箱却能瞬间受到。。。。
用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

2、添加远程库
登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库，在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
将远程库关联至远程库：git remote add origin git@github.com:yourname/learngit.git
*：将yourname处改为你注册GitHub时使用的名字；添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
将当前本地库推送到远程库：git push origin master
*：当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。







